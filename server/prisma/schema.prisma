generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  username        String        @unique
  identifier      String        @unique // Can store either email or Google ID
  authType        AuthType      @default(EMAIL)
  password        String
  img             String
  role            Role          @default(USER)
  devices         Device[]
  WishListDevices String[]
  CartDevices     Cart[]
  transactions    Transaction[]
  Review          Review[]
  Order           Order[]
}

model Cart {
  DeviceId String  
  Quantity Int
  user     User?   @relation(fields: [userId], references: [id])
  userId   String
  @@id([DeviceId , userId]) //composite primary key
}

model Device {
  DeviceId       String        @id @default(uuid())
  Quantity       Int
  DeviceName     String
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
  Brand          String
  Model          String
  Category       Category      @relation(fields: [categoryid], references: [CategoryId])
  categoryid     String
  Condition      String // e.g., New, Used, Refurbished
  Specifications Json // For storing CPU, RAM, Storage, etc.
  Description    String
  Images         String[] // Array of image URLs
  SerialNumber   String
  status         Status        @default(PENDING)
  Price          Float // Price of the device
  transactions   Transaction[]
  Reviews        Review[]
  Order          Order?        @relation(fields: [orderOrderId], references: [OrderId])
  orderOrderId   String?
  OrderItem      OrderItem[]
}

model Transaction {
  TransactionId String        @id @default(uuid())
  device        Device        @relation(fields: [deviceId], references: [DeviceId])
  deviceId      String
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  price         Float
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
}

model Category {
  CategoryId   String   @id @default(uuid())
  CategoryName String   @unique
  Image        String
  Description  String
  devices      Device[]
}

model Order {
  OrderId    String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id]) // Relation to the user
  userId     String
  createdAt  DateTime    @default(now())
  items      OrderItem[] // One-to-many relation with OrderItem for devices and quantities
  totalPrice Float // Total price of the order
  status     OrderStatus // Enum to represent order status
  address    String // Shipping address
  city       String // City
  country    String // Country
  zipCode    String // Zip code
  Device     Device[]
}

model OrderItem {
  id       String @id @default(uuid())
  order    Order  @relation(fields: [orderId], references: [OrderId])
  orderId  String
  device   Device @relation(fields: [deviceId], references: [DeviceId])
  deviceId String
  quantity Int // Quantity of this device in the order
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  ReviewId    String   @id @default(uuid()) // Unique identifier for the review
  description String // The review content
  rating      Float // The rating given by the user
  user        User     @relation(fields: [userId], references: [id]) // Relation to the user
  userId      String // Foreign key for the user
  device      Device   @relation(fields: [deviceId], references: [DeviceId]) // Relation to the device
  deviceId    String // Foreign key for the device
  createdAt   DateTime @default(now()) // Timestamp for when the review was created

  @@unique([userId, deviceId]) // Ensure a user can review a device only once
}

enum Role {
  USER
  ADMIN
}

enum AuthType {
  GOOGLEID
  EMAIL
}

enum Status {
  PENDING
  CONFIRMED
  REJECTED
  SOLD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
